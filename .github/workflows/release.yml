---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# docs: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
name: Release

on: # yamllint disable-line rule:truthy
  push:
    tags:
      - 'v*'

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings

jobs:
  goreleaser:
    # runs-on: ubuntu-latest
    runs-on: macos-latest
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
      project-name: ${{ steps.hash.outputs.project-name }}
    # https://goreleaser.com/ci/actions/#token-permissions
    permissions:
      contents: write # needed to write releases
      id-token: write # needed for keyless signing
      packages: write # needed for ghcr access
      attestations: write # needed for provenance
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      # - name: Install Cosign
      #   uses: sigstore/cosign-installer@v3

      - name: Download Syft (to generate SBOMs)
        uses: anchore/sbom-action/download-syft@aa0e114b2e19480f157109b9922bda359bd98b90 # v0.20.8

      - name: Install stable toolchain for x86 linux
        uses: actions-rust-lang/setup-rust-toolchain@1780873c7b576612439a134613cc4cc74ce5538c # v1.15.2
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          cache: false

      - name: Install stable toolchain for aarch64 linux
        uses: actions-rust-lang/setup-rust-toolchain@1780873c7b576612439a134613cc4cc74ce5538c # v1.15.2
        with:
          toolchain: stable
          target: aarch64-unknown-linux-gnu
          cache: false

      - name: Install stable toolchain for macOS
        uses: actions-rust-lang/setup-rust-toolchain@1780873c7b576612439a134613cc4cc74ce5538c # v1.15.2
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          cache: false

      # Need this for both 'zig build' and 'cargo zigbuild'
      - name: Setup Zig
        uses: mlugg/setup-zig@8d6198c65fb0feaa111df26e6b467fea8345e46f # v2.0.5

      - name: Install cargo-zigbuild
        run: cargo install --locked cargo-zigbuild

      - name: Release
        id: run-goreleaser
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # used to push the homebrew tap
          GH_PAT: ${{ secrets.PUBLISHER_TOKEN }}

      - name: Generate binary hashes
        id: hash
        env:
          ARTIFACTS: "${{ steps.run-goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail
          checksum_file=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Checksum") | .path')
          echo "hashes=$(cat $checksum_file | base64)" >> "$GITHUB_OUTPUT"
          echo "project-name=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)" >> "${GITHUB_OUTPUT}"

      # After GoReleaser runs, attest all the files in ./dist/checksums.txt:
      - name: Build provenance
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-checksums: ./dist/checksums.txt

  binary-provenance:
    needs: [goreleaser]
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: "${{ needs.goreleaser.outputs.hashes }}"
      upload-assets: true # upload to a new release

  verification-with-slsa-verifier:
    needs: [goreleaser, binary-provenance]
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Install the verifier
        uses: slsa-framework/slsa-verifier/actions/installer@ea584f4502babc6f60d9bc799dbbb13c1caa9ee6 # v2.7.1

      - name: Download assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_NAME: ${{ needs.goreleaser.outputs.project-name }}
          PROVENANCE: "${{ needs.binary-provenance.outputs.provenance-name }}"
        run: |
          set -euo pipefail
          echo "Download artifacts from ${GITHUB_REPOSITORY} for ${GITHUB_REF_NAME}"
          gh -R "${GITHUB_REPOSITORY}" release download "${GITHUB_REF_NAME}" -p "${PROJECT_NAME}*"
          gh -R "${GITHUB_REPOSITORY}" release download "${GITHUB_REF_NAME}" -p "${PROVENANCE}"
          ls
      - name: Verify assets
        env:
          CHECKSUMS: ${{ needs.goreleaser.outputs.hashes }}
          PROVENANCE: "${{ needs.binary-provenance.outputs.provenance-name }}"
        run: |
          set -euo pipefail
          checksums=$(echo "${CHECKSUMS}" | base64 -d)
          while read -r line; do
              fn=$(echo ${line} | cut -d ' ' -f2)
              echo "Verifying ${fn}"
              slsa-verifier verify-artifact --provenance-path "${PROVENANCE}" \
                                            --source-uri "github.com/${GITHUB_REPOSITORY}" \
                                            --source-tag "${GITHUB_REF_NAME}" \
                                            "${fn}"
          done <<<"${checksums}"

  # verification-with-cosign:
  #   needs: [goreleaser, image-provenance]
  #   runs-on: ubuntu-latest
  #   permissions: read-all
  #   steps:
  #     - name: Login
  #       uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Install Cosign
  #       uses: sigstore/cosign-installer@11086d25041f77fe8fe7b9ea4e48e3b9192b8f19 # v3.1.2

  #     - name: Verify image
  #       env:
  #         IMAGE: ${{ needs.goreleaser.outputs.image }}
  #         DIGEST: ${{ needs.goreleaser.outputs.digest }}
  #       run: |
  #         cosign verify-attestation \
  #             --type slsaprovenance \
  #             --certificate-oidc-issuer https://token.actions.githubusercontent.com \
  #             --certificate-identity-regexp '^https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@refs/tags/v[0-9]+.[0-9]+.[0-9]+$' \
  #             $IMAGE@$DIGEST
